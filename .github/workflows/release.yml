
name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - "release"

env:
  DOCKERHUB_REPO: kratos1937/
  PY_NEXUS: 110.16.193.170:50083
  DOCKER_NEXUS: 110.16.193.170:50080
  RELEASE_VERSION: 0.0.0 # bisheng-langchain nexus 始终替换版本
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    #if: startsWith(github.event.ref, 'refs/tags')
    steps:
      - name: checkout
        uses: actions/checkout@v2
        
      - name: Get version
        id: get_version
        run: |
          echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      # 构建 bisheng-langchain
      - name: Set python version 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8

      - name: Build PyPi bisheng-langchain and push
        id: pypi_build_bisheng_langchain
        run: |
          pip install Cython
          pip install wheel
          pip install twine
          cd ./src/bisheng-langchain
          python setup.py bdist_wheel
          repo="http://${{ env.PY_NEXUS }}/repository/pypi-hosted/"
          twine upload --verbose -u ${{ secrets.NEXUS_USER }}  -p ${{ secrets.NEXUS_PASSWORD }} --repository-url $repo  dist/*.whl    
      
      # 发布到 私有仓库
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 替换poetry编译为私有服务
      - name: replace self-host repo
        uses: snok/install-poetry@v1
        with:
          installer-parallel: true
      
     
      # 构建 backend 并推送到 Docker hub
      - name: Build backend and push
        id: docker_build_backend
        uses: docker/build-push-action@v2
        with:
          # backend 的context目录
          context: "./src/backend/"
          # 是否 docker push
          push: true
          # docker build arg, 注入 APP_NAME/APP_VERSION
          build-args: |
            APP_NAME="bisheng-backend"
            APP_VERSION="release"
          # 生成两个 docker tag: ${APP_VERSION} 和 latest
          tags: |
            ${{ env.DOCKERHUB_REPO }}bisheng-backend:release
      # 构建 Docker frontend 并推送到 Docker hub
      - name: Build frontend and push
        id: docker_build_frontend
        uses: docker/build-push-action@v2
        with:
          # frontend 的context目录
          context: "./src/frontend/"
          # 是否 docker push
          push: true
          # docker build arg, 注入 APP_NAME/APP_VERSION
          build-args: |
            APP_NAME="bisheng-frontend"
            APP_VERSION="release"
          # 生成两个 docker tag: ${APP_VERSION} 和 latest
          tags: |
            ${{ env.DOCKERHUB_REPO }}bisheng-frontend:release
